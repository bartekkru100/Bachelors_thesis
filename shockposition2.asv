function [expansionRatio, flowState, s_shock_1, s_shock_2] = shockposition(gas, s_atmo, s_supersonicExit, s_throat)
import State.*
import Gas.*


s_maxVelocity = gas.maxvelocity;

% Using Muller's method

% Point 1
velocity_1 = s_throat.velocity;
error_M_1 = exiterror(gas, velocity_1, s_throat, s_supersonicExit, s_atmo);

% Point 2
velocity_2 = (s_throat.velocity + s_maxVelocity.velocity) / 2;
error_M_2 = exiterror(gas, velocity_2, s_throat, s_supersonicExit, s_atmo);

% Point 3
velocity_3 = s_maxVelocity.velocity;
error_M_3 = exiterror(gas, velocity_3, s_throat, s_supersonicExit, s_atmo);

n = 0;
while 1
    n = n + 1;
    if n > 100
        disp("convergence failed in shockposition at error = " + error_M_1)
        break;
    end

    q = (velocity_1 - velocity_2) / (velocity_2 - velocity_3);
    a = q * error_M_1 - q * (1 + q) * error_M_2 + q ^ 2 * error_M_3;
    b = (2 * q + 1) * error_M_1 - (1 + q) ^ 2 * error_M_2 + q ^ 2 * error_M_3;
    c = (1 + q) * error_M_1;
    sqrtDelta = sqrt(b ^ 2 - 4 * a * c);
    denom(1) = (b + sqrtDelta);
    denom(2) = (b - sqrtDelta);
    velocity_0 = max(velocity_1 - (velocity_1 - velocity_2) * (2 * c) ./ denom);

    if velocity_0 >= s_throat.velocity
        velocity_0 = max([velocity_1, velocity_2, velocity_3, s_throat.velocity]);
        if velocity_1 >= s_throat.velocity
            %error("failed to find shocked exit condition")
            break;
        end
    end
    error_M_0 = exiterror(gas, velocity_0, s_throat, s_supersonicExit, s_atmo);

    velocity_3 = velocity_2;
    error_M_3 = error_M_2;
    velocity_2 = velocity_1;
    error_M_2 = error_M_1;
    velocity_1 = velocity_0;
    error_M_1 = error_M_0;

    if abs(error_M_1) < Tolerance
        break;
    end
end

end

function error_M = exiterror(gas, velocity, s_throat)
import Gas.*

setstate(gas, s_throat);
setvelocityisentropic(gas, velocity);
s_shock_1 = State(gas);

s_shock_2.velocity = s_throat.velocity ^ 2 / s_shock_1.velocity;
s_shock_2.enthalpy = s_shock_1.totEnergy - s_shock_2.velocity ^ 2 / 2;

setstate(gas, 'H', s_shock_2.enthalpy, )

end